
keypad 2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000506  0000057a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000506  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010bd  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aa2  00000000  00000000  00001779  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000972  00000000  00000000  0000221b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00002b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053e  00000000  00000000  00002c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007f3  00000000  00000000  000031da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000039cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e0       	ldi	r30, 0x06	; 6
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 33       	cpi	r26, 0x32	; 50
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	55 d0       	rcall	.+170    	; 0x15e <main>
  b4:	26 c2       	rjmp	.+1100   	; 0x502 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <enable>:
	lcdCmd(FORCE_CURSOR_BEGINNING_FIRST_LINE);
	_delay_ms(2);
}

void enable(){
	PORTB |= (1 << EN);
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	83 ec       	ldi	r24, 0xC3	; 195
  c0:	99 e0       	ldi	r25, 0x09	; 9
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <enable+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <enable+0x10>
  c8:	00 00       	nop
	_delay_ms(10);
	PORTB &= ~(1 << EN);
  ca:	88 b3       	in	r24, 0x18	; 24
  cc:	8d 7f       	andi	r24, 0xFD	; 253
  ce:	88 bb       	out	0x18, r24	; 24
  d0:	83 ec       	ldi	r24, 0xC3	; 195
  d2:	99 e0       	ldi	r25, 0x09	; 9
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <enable+0x1c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <enable+0x22>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <lcdCmd>:
	_delay_ms(10);
}

void lcdCmd(char u8Cmd)
{
	PORTB &= ~(1 << RS);
  de:	98 b3       	in	r25, 0x18	; 24
  e0:	9e 7f       	andi	r25, 0xFE	; 254
  e2:	98 bb       	out	0x18, r25	; 24
	PORTA = u8Cmd;
  e4:	8b bb       	out	0x1b, r24	; 27
	
enable();
  e6:	e8 cf       	rjmp	.-48     	; 0xb8 <enable>
  e8:	08 95       	ret

000000ea <lcdInit>:
#define F_CPU 1000000UL
#include "util/delay.h"

void lcdInit()
{
	DDRA = 0xFF;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1 << RS);
  ee:	87 b3       	in	r24, 0x17	; 23
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << RS);
  f4:	87 b3       	in	r24, 0x17	; 23
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	87 bb       	out	0x17, r24	; 23
	
	PORTB &= ~(1 << EN);
  fa:	88 b3       	in	r24, 0x18	; 24
  fc:	8d 7f       	andi	r24, 0xFD	; 253
  fe:	88 bb       	out	0x18, r24	; 24
	// sending initialization commands
	lcdCmd(TOW_LINES_EIGHT_BIT_MODE);
 100:	88 e3       	ldi	r24, 0x38	; 56
 102:	ed df       	rcall	.-38     	; 0xde <lcdCmd>
	lcdCmd(DISPLAY_ON_CURSOR_BLINKING);
 104:	8e e0       	ldi	r24, 0x0E	; 14
 106:	eb df       	rcall	.-42     	; 0xde <lcdCmd>
	lcdCmd(CLEAR_DISPLAY_SCREEN);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	e9 df       	rcall	.-46     	; 0xde <lcdCmd>
	lcdCmd(INCREAMENT_CURSOR);
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	e7 df       	rcall	.-50     	; 0xde <lcdCmd>
	lcdCmd(FORCE_CURSOR_BEGINNING_FIRST_LINE);
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	e5 df       	rcall	.-54     	; 0xde <lcdCmd>
 114:	83 ef       	ldi	r24, 0xF3	; 243
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcdInit+0x2e>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcdInit+0x34>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <lcdData>:
 122:	98 b3       	in	r25, 0x18	; 24
	
enable();
}

void lcdData(char u8Data){
	PORTB |= (1 << RS);
 124:	91 60       	ori	r25, 0x01	; 1
 126:	98 bb       	out	0x18, r25	; 24
	PORTA = u8Data;
 128:	8b bb       	out	0x1b, r24	; 27
	enable();
 12a:	c6 cf       	rjmp	.-116    	; 0xb8 <enable>
 12c:	08 95       	ret

0000012e <lcdPrint>:
}

void lcdPrint(char *str)
{
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	8c 01       	movw	r16, r24
	uint8_t u8Index = 0;
 136:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[u8Index] != '\0')
 138:	08 c0       	rjmp	.+16     	; 0x14a <lcdPrint+0x1c>
	{
		lcdData(str[u8Index]);
 13a:	f3 df       	rcall	.-26     	; 0x122 <lcdData>
		u8Index++;
 13c:	cf 5f       	subi	r28, 0xFF	; 255
 13e:	8b e4       	ldi	r24, 0x4B	; 75
 140:	9d e1       	ldi	r25, 0x1D	; 29
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcdPrint+0x14>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcdPrint+0x1a>
 148:	00 00       	nop
}

void lcdPrint(char *str)
{
	uint8_t u8Index = 0;
	while(str[u8Index] != '\0')
 14a:	f8 01       	movw	r30, r16
 14c:	ec 0f       	add	r30, r28
 14e:	f1 1d       	adc	r31, r1
 150:	80 81       	ld	r24, Z
 152:	81 11       	cpse	r24, r1
 154:	f2 cf       	rjmp	.-28     	; 0x13a <lcdPrint+0xc>
	{
		lcdData(str[u8Index]);
		u8Index++;
		_delay_ms(30);
	}
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <main>:
#include "utility.h"
#include "lcd.h"


int main(void)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	60 97       	sbiw	r28, 0x10	; 16
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
	lcdInit();
 172:	bb df       	rcall	.-138    	; 0xea <lcdInit>
	lcdPrint("press a key");
 174:	80 e1       	ldi	r24, 0x10	; 16
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	da df       	rcall	.-76     	; 0x12e <lcdPrint>
	
	unsigned char butn;
	unsigned char malik[4][4] ={{'1', '2', '3', 'A'},
 17a:	80 e1       	ldi	r24, 0x10	; 16
 17c:	e0 e0       	ldi	r30, 0x00	; 0
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	de 01       	movw	r26, r28
 182:	11 96       	adiw	r26, 0x01	; 1
 184:	01 90       	ld	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	8a 95       	dec	r24
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x26>
	{'4', '5', '6', 'B'},
	{'7', '8', '9', 'C'},
	{'*', '0', '#', 'D'}};
	
	for (int i=4; i<8;i++) //output
 18c:	24 e0       	ldi	r18, 0x04	; 4
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	12 c0       	rjmp	.+36     	; 0x1b6 <main+0x58>
	{
		DDRC |= (1 << i);
 192:	44 b3       	in	r20, 0x14	; 20
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 2e       	mov	r0, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <main+0x42>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	0a 94       	dec	r0
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <main+0x3e>
 1a4:	94 2f       	mov	r25, r20
 1a6:	98 2b       	or	r25, r24
 1a8:	94 bb       	out	0x14, r25	; 20
		PORTC &= ~(1 << i);
 1aa:	95 b3       	in	r25, 0x15	; 21
 1ac:	80 95       	com	r24
 1ae:	89 23       	and	r24, r25
 1b0:	85 bb       	out	0x15, r24	; 21
	unsigned char malik[4][4] ={{'1', '2', '3', 'A'},
	{'4', '5', '6', 'B'},
	{'7', '8', '9', 'C'},
	{'*', '0', '#', 'D'}};
	
	for (int i=4; i<8;i++) //output
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	28 30       	cpi	r18, 0x08	; 8
 1b8:	31 05       	cpc	r19, r1
 1ba:	5c f3       	brlt	.-42     	; 0x192 <main+0x34>
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	12 c0       	rjmp	.+36     	; 0x1e6 <main+0x88>
		DDRC |= (1 << i);
		PORTC &= ~(1 << i);
	}
	for (int j=0; j<4;j++) //input
	{
		DDRC &= ~(1 << j);
 1c2:	44 b3       	in	r20, 0x14	; 20
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 2e       	mov	r0, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <main+0x72>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <main+0x6e>
 1d4:	98 2f       	mov	r25, r24
 1d6:	90 95       	com	r25
 1d8:	94 23       	and	r25, r20
 1da:	94 bb       	out	0x14, r25	; 20
		PORTC |= (1 << j);
 1dc:	95 b3       	in	r25, 0x15	; 21
 1de:	89 2b       	or	r24, r25
 1e0:	85 bb       	out	0x15, r24	; 21
	for (int i=4; i<8;i++) //output
	{
		DDRC |= (1 << i);
		PORTC &= ~(1 << i);
	}
	for (int j=0; j<4;j++) //input
 1e2:	2f 5f       	subi	r18, 0xFF	; 255
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	24 30       	cpi	r18, 0x04	; 4
 1e8:	31 05       	cpc	r19, r1
 1ea:	5c f3       	brlt	.-42     	; 0x1c2 <main+0x64>
	{
		DDRC &= ~(1 << j);
		PORTC |= (1 << j);
	}
	DDRA = 0xFF;
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	8a bb       	out	0x1a, r24	; 26
	
	while (1)
	{
		
		
		if(gpio_read_pin(PORTC_ID, 0) == 1 && gpio_read_pin(PORTC_ID, 1) ==1 && gpio_read_pin(PORTC_ID, 2) == 1 && gpio_read_pin(PORTC_ID, 3) == 1){
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	fb d0       	rcall	.+502    	; 0x3ec <gpio_read_pin>
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	89 f4       	brne	.+34     	; 0x21c <main+0xbe>
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	f6 d0       	rcall	.+492    	; 0x3ec <gpio_read_pin>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	61 f4       	brne	.+24     	; 0x21c <main+0xbe>
 204:	62 e0       	ldi	r22, 0x02	; 2
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	f1 d0       	rcall	.+482    	; 0x3ec <gpio_read_pin>
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	39 f4       	brne	.+14     	; 0x21c <main+0xbe>
 20e:	63 e0       	ldi	r22, 0x03	; 3
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	ec d0       	rcall	.+472    	; 0x3ec <gpio_read_pin>
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	11 f4       	brne	.+4      	; 0x21c <main+0xbe>
 218:	1b ba       	out	0x1b, r1	; 27
			PORTA = 0x00;
 21a:	ea cf       	rjmp	.-44     	; 0x1f0 <main+0x92>
 21c:	20 e0       	ldi	r18, 0x00	; 0
		}
		else
		{
			for (int j=0; j<4;j++) // read status of colums pins
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	0c c0       	rjmp	.+24     	; 0x23a <main+0xdc>
 222:	83 b3       	in	r24, 0x13	; 19
			{
				
				if ((PINC & (1 << j ))==0)
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 2e       	mov	r0, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <main+0xd0>
 22a:	95 95       	asr	r25
 22c:	87 95       	ror	r24
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <main+0xcc>
 232:	80 ff       	sbrs	r24, 0
 234:	12 2f       	mov	r17, r18
				{
					butn = j;
 236:	2f 5f       	subi	r18, 0xFF	; 255
		if(gpio_read_pin(PORTC_ID, 0) == 1 && gpio_read_pin(PORTC_ID, 1) ==1 && gpio_read_pin(PORTC_ID, 2) == 1 && gpio_read_pin(PORTC_ID, 3) == 1){
			PORTA = 0x00;
		}
		else
		{
			for (int j=0; j<4;j++) // read status of colums pins
 238:	3f 4f       	sbci	r19, 0xFF	; 255
 23a:	24 30       	cpi	r18, 0x04	; 4
 23c:	31 05       	cpc	r19, r1
 23e:	8c f3       	brlt	.-30     	; 0x222 <main+0xc4>
 240:	85 b3       	in	r24, 0x15	; 21
				if ((PINC & (1 << j ))==0)
				{
					butn = j;
				}
			}
			PORTC &= ~(1 << 4);
 242:	8f 7e       	andi	r24, 0xEF	; 239
 244:	85 bb       	out	0x15, r24	; 21
 246:	85 b3       	in	r24, 0x15	; 21
			PORTC |= (1 << 5);
 248:	80 62       	ori	r24, 0x20	; 32
 24a:	85 bb       	out	0x15, r24	; 21
 24c:	85 b3       	in	r24, 0x15	; 21
			PORTC |= (1 << 6);
 24e:	80 64       	ori	r24, 0x40	; 64
 250:	85 bb       	out	0x15, r24	; 21
			PORTC |= (1 << 7);
 252:	85 b3       	in	r24, 0x15	; 21
 254:	80 68       	ori	r24, 0x80	; 128
 256:	85 bb       	out	0x15, r24	; 21
			if ((gpio_read_pin(PORTC_ID,butn))==1)
 258:	61 2f       	mov	r22, r17
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	c7 d0       	rcall	.+398    	; 0x3ec <gpio_read_pin>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	09 f0       	breq	.+2      	; 0x264 <main+0x106>
 262:	a1 c0       	rjmp	.+322    	; 0x3a6 <main+0x248>
 264:	85 b3       	in	r24, 0x15	; 21
			{
				PORTC |= (1 << 4);
 266:	80 61       	ori	r24, 0x10	; 16
 268:	85 bb       	out	0x15, r24	; 21
 26a:	85 b3       	in	r24, 0x15	; 21
				PORTC &= ~(1 << 5);
 26c:	8f 7d       	andi	r24, 0xDF	; 223
 26e:	85 bb       	out	0x15, r24	; 21
 270:	85 b3       	in	r24, 0x15	; 21
				PORTC |= (1 << 6);
 272:	80 64       	ori	r24, 0x40	; 64
 274:	85 bb       	out	0x15, r24	; 21
				PORTC |= (1 << 7);
 276:	85 b3       	in	r24, 0x15	; 21
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	85 bb       	out	0x15, r24	; 21
				if ((gpio_read_pin(PORTC_ID,butn))==1)
 27c:	61 2f       	mov	r22, r17
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	b5 d0       	rcall	.+362    	; 0x3ec <gpio_read_pin>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	09 f0       	breq	.+2      	; 0x288 <main+0x12a>
 286:	71 c0       	rjmp	.+226    	; 0x36a <main+0x20c>
 288:	85 b3       	in	r24, 0x15	; 21
				{
					PORTC |= (1 << 4);
 28a:	80 61       	ori	r24, 0x10	; 16
 28c:	85 bb       	out	0x15, r24	; 21
 28e:	85 b3       	in	r24, 0x15	; 21
					PORTC |= (1 << 5);
 290:	80 62       	ori	r24, 0x20	; 32
 292:	85 bb       	out	0x15, r24	; 21
 294:	85 b3       	in	r24, 0x15	; 21
					PORTC &= ~(1 << 6);
 296:	8f 7b       	andi	r24, 0xBF	; 191
 298:	85 bb       	out	0x15, r24	; 21
					PORTC |= (1 << 7);
 29a:	85 b3       	in	r24, 0x15	; 21
 29c:	80 68       	ori	r24, 0x80	; 128
 29e:	85 bb       	out	0x15, r24	; 21
					if ((gpio_read_pin(PORTC_ID,butn))==1)
 2a0:	61 2f       	mov	r22, r17
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	a3 d0       	rcall	.+326    	; 0x3ec <gpio_read_pin>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	09 f0       	breq	.+2      	; 0x2ac <main+0x14e>
 2aa:	41 c0       	rjmp	.+130    	; 0x32e <main+0x1d0>
 2ac:	85 b3       	in	r24, 0x15	; 21
					{
						PORTC |= (1 << 4);
 2ae:	80 61       	ori	r24, 0x10	; 16
 2b0:	85 bb       	out	0x15, r24	; 21
 2b2:	85 b3       	in	r24, 0x15	; 21
						PORTC |= (1 << 5);
 2b4:	80 62       	ori	r24, 0x20	; 32
 2b6:	85 bb       	out	0x15, r24	; 21
						PORTC |= (1 << 6);
 2b8:	85 b3       	in	r24, 0x15	; 21
 2ba:	80 64       	ori	r24, 0x40	; 64
 2bc:	85 bb       	out	0x15, r24	; 21
						PORTC &= ~(1 << 7);
 2be:	85 b3       	in	r24, 0x15	; 21
 2c0:	8f 77       	andi	r24, 0x7F	; 127
						if ((gpio_read_pin(PORTC_ID,butn))==1)
 2c2:	85 bb       	out	0x15, r24	; 21
 2c4:	61 2f       	mov	r22, r17
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	91 d0       	rcall	.+290    	; 0x3ec <gpio_read_pin>
 2ca:	81 30       	cpi	r24, 0x01	; 1
						{
							PORTA = 0x00;
 2cc:	11 f4       	brne	.+4      	; 0x2d2 <main+0x174>
 2ce:	1b ba       	out	0x1b, r1	; 27
						}
						else {
							lcdCmd(0x01);
 2d0:	8f cf       	rjmp	.-226    	; 0x1f0 <main+0x92>
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	04 df       	rcall	.-504    	; 0xde <lcdCmd>
							lcdCmd(0x0E);
 2d6:	8e e0       	ldi	r24, 0x0E	; 14
 2d8:	02 df       	rcall	.-508    	; 0xde <lcdCmd>
 2da:	9f 99       	sbic	0x13, 7	; 19
							if (((PINC & (1 << 7))==0 ) && ((PINC & (1 << butn))==0 ))
 2dc:	13 c0       	rjmp	.+38     	; 0x304 <main+0x1a6>
 2de:	83 b3       	in	r24, 0x13	; 19
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	01 2e       	mov	r0, r17
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <main+0x18c>
 2e6:	95 95       	asr	r25
 2e8:	87 95       	ror	r24
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <main+0x188>
 2ee:	80 fd       	sbrc	r24, 0
 2f0:	09 c0       	rjmp	.+18     	; 0x304 <main+0x1a6>
							{
								lcdPrint("malik4");
 2f2:	8c e1       	ldi	r24, 0x1C	; 28
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	1b df       	rcall	.-458    	; 0x12e <lcdPrint>
 2f8:	83 ec       	ldi	r24, 0xC3	; 195
 2fa:	99 e0       	ldi	r25, 0x09	; 9
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0x19e>
 300:	00 c0       	rjmp	.+0      	; 0x302 <main+0x1a4>
 302:	00 00       	nop
 304:	24 e0       	ldi	r18, 0x04	; 4
		if(gpio_read_pin(PORTC_ID, 0) == 1 && gpio_read_pin(PORTC_ID, 1) ==1 && gpio_read_pin(PORTC_ID, 2) == 1 && gpio_read_pin(PORTC_ID, 3) == 1){
			PORTA = 0x00;
		}
		else
		{
			for (int j=0; j<4;j++) // read status of colums pins
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	0e c0       	rjmp	.+28     	; 0x326 <main+0x1c8>
 30a:	45 b3       	in	r20, 0x15	; 21
								_delay_ms(10);
							}
							
							for (int i =4; i<8;i++)
							{
								PORTC &= ~(1 << i);
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 2e       	mov	r0, r18
 312:	02 c0       	rjmp	.+4      	; 0x318 <main+0x1ba>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	0a 94       	dec	r0
 31a:	e2 f7       	brpl	.-8      	; 0x314 <main+0x1b6>
 31c:	80 95       	com	r24
 31e:	84 23       	and	r24, r20
 320:	85 bb       	out	0x15, r24	; 21
							{
								lcdPrint("malik4");
								_delay_ms(10);
							}
							
							for (int i =4; i<8;i++)
 322:	2f 5f       	subi	r18, 0xFF	; 255
 324:	3f 4f       	sbci	r19, 0xFF	; 255
 326:	28 30       	cpi	r18, 0x08	; 8
 328:	31 05       	cpc	r19, r1
 32a:	7c f3       	brlt	.-34     	; 0x30a <main+0x1ac>
 32c:	61 cf       	rjmp	.-318    	; 0x1f0 <main+0x92>
							
						}
						
					}
					else {
						lcdPrint("malik3");
 32e:	83 e2       	ldi	r24, 0x23	; 35
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	fd de       	rcall	.-518    	; 0x12e <lcdPrint>
 334:	83 ec       	ldi	r24, 0xC3	; 195
 336:	99 e0       	ldi	r25, 0x09	; 9
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <main+0x1da>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x1e0>
 33e:	00 00       	nop
 340:	24 e0       	ldi	r18, 0x04	; 4
						_delay_ms(10);
						for (int i =4; i<8;i++)
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	0e c0       	rjmp	.+28     	; 0x362 <main+0x204>
 346:	45 b3       	in	r20, 0x15	; 21
						{
							PORTC &= ~(1 << i);
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 2e       	mov	r0, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <main+0x1f6>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	0a 94       	dec	r0
 356:	e2 f7       	brpl	.-8      	; 0x350 <main+0x1f2>
 358:	80 95       	com	r24
 35a:	84 23       	and	r24, r20
 35c:	85 bb       	out	0x15, r24	; 21
						
					}
					else {
						lcdPrint("malik3");
						_delay_ms(10);
						for (int i =4; i<8;i++)
 35e:	2f 5f       	subi	r18, 0xFF	; 255
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	28 30       	cpi	r18, 0x08	; 8
 364:	31 05       	cpc	r19, r1
 366:	7c f3       	brlt	.-34     	; 0x346 <main+0x1e8>
 368:	43 cf       	rjmp	.-378    	; 0x1f0 <main+0x92>
						}
						
					}
				}
				else {
					lcdPrint("malik2");
 36a:	8a e2       	ldi	r24, 0x2A	; 42
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	df de       	rcall	.-578    	; 0x12e <lcdPrint>
 370:	83 ec       	ldi	r24, 0xC3	; 195
 372:	99 e0       	ldi	r25, 0x09	; 9
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <main+0x216>
 378:	00 c0       	rjmp	.+0      	; 0x37a <main+0x21c>
 37a:	00 00       	nop
 37c:	24 e0       	ldi	r18, 0x04	; 4
					_delay_ms(10);
					for (int i =4; i<8;i++)
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	0e c0       	rjmp	.+28     	; 0x39e <main+0x240>
 382:	45 b3       	in	r20, 0x15	; 21
					{
						PORTC &= ~(1 << i);
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 2e       	mov	r0, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <main+0x232>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <main+0x22e>
 394:	80 95       	com	r24
 396:	84 23       	and	r24, r20
 398:	85 bb       	out	0x15, r24	; 21
 39a:	2f 5f       	subi	r18, 0xFF	; 255
					}
				}
				else {
					lcdPrint("malik2");
					_delay_ms(10);
					for (int i =4; i<8;i++)
 39c:	3f 4f       	sbci	r19, 0xFF	; 255
 39e:	28 30       	cpi	r18, 0x08	; 8
 3a0:	31 05       	cpc	r19, r1
 3a2:	7c f3       	brlt	.-34     	; 0x382 <main+0x224>
 3a4:	25 cf       	rjmp	.-438    	; 0x1f0 <main+0x92>
 3a6:	ed e0       	ldi	r30, 0x0D	; 13
					}
					
				}
			}
			else {
				PORTA = malik[3][butn];
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	ec 0f       	add	r30, r28
 3ac:	fd 1f       	adc	r31, r29
 3ae:	e1 0f       	add	r30, r17
 3b0:	f1 1d       	adc	r31, r1
 3b2:	80 81       	ld	r24, Z
 3b4:	8b bb       	out	0x1b, r24	; 27
 3b6:	83 ec       	ldi	r24, 0xC3	; 195
 3b8:	99 e0       	ldi	r25, 0x09	; 9
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0x25c>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x262>
 3c0:	00 00       	nop
 3c2:	24 e0       	ldi	r18, 0x04	; 4
				_delay_ms(10);
				for (int i =4; i<8;i++)
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	0e c0       	rjmp	.+28     	; 0x3e4 <main+0x286>
 3c8:	45 b3       	in	r20, 0x15	; 21
				{
					PORTC &= ~(1 << i);
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 2e       	mov	r0, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <main+0x278>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	0a 94       	dec	r0
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <main+0x274>
 3da:	80 95       	com	r24
 3dc:	84 23       	and	r24, r20
 3de:	85 bb       	out	0x15, r24	; 21
 3e0:	2f 5f       	subi	r18, 0xFF	; 255
				}
			}
			else {
				PORTA = malik[3][butn];
				_delay_ms(10);
				for (int i =4; i<8;i++)
 3e2:	3f 4f       	sbci	r19, 0xFF	; 255
 3e4:	28 30       	cpi	r18, 0x08	; 8
 3e6:	31 05       	cpc	r19, r1
 3e8:	7c f3       	brlt	.-34     	; 0x3c8 <main+0x26a>
 3ea:	02 cf       	rjmp	.-508    	; 0x1f0 <main+0x92>

000003ec <gpio_read_pin>:
 3ec:	82 30       	cpi	r24, 0x02	; 2
	}
}

// Read the state of the specified pin of the given port
uint8_t gpio_read_pin(PORT_ID port, uint8_t pin) {
	switch(port) {
 3ee:	b9 f1       	breq	.+110    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3f0:	28 f4       	brcc	.+10     	; 0x3fc <gpio_read_pin+0x10>
 3f2:	88 23       	and	r24, r24
 3f4:	61 f0       	breq	.+24     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	f1 f0       	breq	.+60     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3fa:	81 c0       	rjmp	.+258    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 3fc:	84 30       	cpi	r24, 0x04	; 4
 3fe:	09 f4       	brne	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	56 c0       	rjmp	.+172    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 402:	08 f4       	brcc	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	40 c0       	rjmp	.+128    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 406:	85 30       	cpi	r24, 0x05	; 5
 408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	65 c0       	rjmp	.+202    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 40c:	78 c0       	rjmp	.+240    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
		case PORTA_ID:
		return READ_BIT(PINA, pin);  // Read the pin of PORTA
 40e:	49 b3       	in	r20, 0x19	; 25
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	9c 01       	movw	r18, r24
 416:	06 2e       	mov	r0, r22
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	22 0f       	add	r18, r18
 41c:	33 1f       	adc	r19, r19
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	84 2f       	mov	r24, r20
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	82 23       	and	r24, r18
 428:	93 23       	and	r25, r19
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	95 95       	asr	r25
 42e:	87 95       	ror	r24
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 434:	08 95       	ret
		case PORTB_ID:
		return READ_BIT(PINB, pin);  // Read the pin of PORTB
 436:	46 b3       	in	r20, 0x16	; 22
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	9c 01       	movw	r18, r24
 43e:	06 2e       	mov	r0, r22
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	0a 94       	dec	r0
 448:	e2 f7       	brpl	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	84 2f       	mov	r24, r20
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	82 23       	and	r24, r18
 450:	93 23       	and	r25, r19
 452:	02 c0       	rjmp	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 454:	95 95       	asr	r25
 456:	87 95       	ror	r24
 458:	6a 95       	dec	r22
 45a:	e2 f7       	brpl	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45c:	08 95       	ret
		case PORTC_ID:
		return READ_BIT(PINC, pin);  // Read the pin of PORTC
 45e:	43 b3       	in	r20, 0x13	; 19
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	9c 01       	movw	r18, r24
 466:	06 2e       	mov	r0, r22
 468:	02 c0       	rjmp	.+4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 46a:	22 0f       	add	r18, r18
 46c:	33 1f       	adc	r19, r19
 46e:	0a 94       	dec	r0
 470:	e2 f7       	brpl	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 472:	84 2f       	mov	r24, r20
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	82 23       	and	r24, r18
 478:	93 23       	and	r25, r19
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47c:	95 95       	asr	r25
 47e:	87 95       	ror	r24
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 484:	08 95       	ret
		case PORTD_ID:
		return READ_BIT(PIND, pin);  // Read the pin of PORTD
 486:	40 b3       	in	r20, 0x10	; 16
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	9c 01       	movw	r18, r24
 48e:	06 2e       	mov	r0, r22
 490:	02 c0       	rjmp	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	0a 94       	dec	r0
 498:	e2 f7       	brpl	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 49a:	84 2f       	mov	r24, r20
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	82 23       	and	r24, r18
 4a0:	93 23       	and	r25, r19
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a4:	95 95       	asr	r25
 4a6:	87 95       	ror	r24
 4a8:	6a 95       	dec	r22
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4ac:	08 95       	ret
		case PORTE_ID:
		return READ_BIT(PINE, pin);  // Read the pin of PORTE
 4ae:	41 b1       	in	r20, 0x01	; 1
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	9c 01       	movw	r18, r24
 4b6:	06 2e       	mov	r0, r22
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4ba:	22 0f       	add	r18, r18
 4bc:	33 1f       	adc	r19, r19
 4be:	0a 94       	dec	r0
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4c2:	84 2f       	mov	r24, r20
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	82 23       	and	r24, r18
 4c8:	93 23       	and	r25, r19
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4cc:	95 95       	asr	r25
 4ce:	87 95       	ror	r24
 4d0:	6a 95       	dec	r22
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d4:	08 95       	ret
		case PORTF_ID:
		return READ_BIT(PINF, pin);  // Read the pin of PORTF
 4d6:	40 b1       	in	r20, 0x00	; 0
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	9c 01       	movw	r18, r24
 4de:	06 2e       	mov	r0, r22
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e2:	22 0f       	add	r18, r18
 4e4:	33 1f       	adc	r19, r19
 4e6:	0a 94       	dec	r0
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4ea:	84 2f       	mov	r24, r20
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	82 23       	and	r24, r18
 4f0:	93 23       	and	r25, r19
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f4:	95 95       	asr	r25
 4f6:	87 95       	ror	r24
 4f8:	6a 95       	dec	r22
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4fc:	08 95       	ret
		default:
		return ERROR;  // Return 0xEE for invalid port
 4fe:	8e ee       	ldi	r24, 0xEE	; 238
	}
}
 500:	08 95       	ret

00000502 <_exit>:
 502:	f8 94       	cli

00000504 <__stop_program>:
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stop_program>
